{"version":3,"sources":["pages/docs/Deployment.js","components/Code.js"],"names":["NavLink","React","forwardRef","props","ref","innerRef","Divider","styled","MuiDivider","spacing","Breadcrumbs","MuiBreadcrumbs","Typography","MuiTypography","Introduction","mb","variant","gutterBottom","my","StaticServer","href","target","rel","OtherSolutions","Express","Netlify","Deployment","Fragment","title","container","justify","item","xs","lg","xl","display","aria-label","mt","component","exact","to","Base","SyntaxHighlighter","theme","Code","children","language","style","vs2015"],"mappings":"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","file":"static/js/45.d0b17c91.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { NavLink as RouterNavLink } from \"react-router-dom\";\r\n\r\nimport { Helmet } from 'react-helmet';\r\n\r\nimport {\r\n  Box,\r\n  Breadcrumbs as MuiBreadcrumbs,\r\n  Divider as MuiDivider,\r\n  Grid,\r\n  Link,\r\n  Typography as MuiTypography\r\n} from \"@material-ui/core\";\r\n\r\nimport { spacing } from \"@material-ui/system\";\r\n\r\nimport Code from \"../../components/Code\";\r\n\r\nconst NavLink = React.forwardRef((props, ref) => (\r\n  <RouterNavLink innerRef={ref} {...props} />\r\n));\r\n\r\nconst Divider = styled(MuiDivider)(spacing);\r\n\r\nconst Breadcrumbs = styled(MuiBreadcrumbs)(spacing);\r\n\r\nconst Typography = styled(MuiTypography)(spacing);\r\n\r\nfunction Introduction() {\r\n  return (\r\n    <Box mb={10}>\r\n      <Typography variant=\"h3\" gutterBottom>\r\n        Introduction\r\n      </Typography>\r\n      <Typography variant=\"subtitle1\" gutterBottom my={4}>\r\n        <code>npm run build</code> creates a build directory with a production build of your app. Set up your favorite HTTP server so that a visitor to your site is served index.html, and requests to static paths like <code>{`/static/js/main.<hash>.js`}</code> are served with the contents of the <code>{`/static/js/main.<hash>.js`}</code> file.\r\n      </Typography>\r\n    </Box>\r\n  );\r\n}\r\n\r\nfunction StaticServer() {\r\n  return (\r\n    <Box mb={10}>\r\n      <Typography variant=\"h3\" gutterBottom>\r\n        Static Server\r\n      </Typography>\r\n      <Typography variant=\"subtitle1\" gutterBottom my={4}>\r\n        For environments using <Link href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"noreferrer noopener\">Node</Link>, the easiest way to handle this would be to install <Link href=\"https://github.com/zeit/serve\" target=\"_blank\" rel=\"noreferrer noopener\">serve</Link> and let it handle the rest:\r\n\r\n        <Code>{`npm install -g serve\r\nserve -s build`}</Code>\r\n      </Typography>\r\n      <Typography variant=\"subtitle1\" gutterBottom my={4}>\r\n        The last command shown above will serve your static site on the port 5000. Like many of <Link href=\"https://github.com/vercel/serve\" target=\"_blank\" rel=\"noreferrer noopener\">serve</Link>’s internal settings, the port can be adjusted using the <code>-l</code> or <code>--listen</code> flags:\r\n\r\n        <Code>serve -s build -l 4000</Code>\r\n      </Typography>\r\n      <Typography variant=\"subtitle1\" gutterBottom my={4}>\r\n        Run this command to get a full list of the options available:\r\n\r\n        <Code>serve -h</Code>\r\n      </Typography>\r\n    </Box>\r\n  );\r\n}\r\n\r\nfunction OtherSolutions() {\r\n  return (\r\n    <Box mb={10}>\r\n      <Typography variant=\"h3\" gutterBottom>\r\n        Other Solutions\r\n      </Typography>\r\n      <Typography variant=\"subtitle1\" gutterBottom my={4}>\r\n        You don’t necessarily need a static server in order to run a Create React App project in production. It also works well when integrated into an existing server side app.\r\n      </Typography>\r\n    </Box>\r\n  );\r\n}\r\n\r\nfunction Express() {\r\n  return (\r\n    <Box mb={10}>\r\n      <Typography variant=\"h4\" gutterBottom>\r\n        Express\r\n      </Typography>\r\n      <Typography variant=\"subtitle1\" gutterBottom my={4}>\r\n        Express is a fast, unopinionated, minimalist web framework for Node.js. Here’s a programmatic example:\r\n\r\n        <Code>{`const express = require('express');\r\nconst path = require('path');\r\nconst app = express();\r\napp.use(express.static(path.join(__dirname, 'build')));\r\napp.get('/', function(req, res) {\r\n  res.sendFile(path.join(__dirname, 'build', 'index.html'));\r\n});\r\napp.listen(9000);`}</Code>\r\n      </Typography>\r\n    </Box>\r\n  );\r\n}\r\n\r\nfunction Netlify() {\r\n  return (\r\n    <Box mb={10}>\r\n      <Typography variant=\"h4\" gutterBottom>\r\n        Netlify\r\n      </Typography>\r\n      <Typography variant=\"subtitle1\" gutterBottom my={4}>\r\n        Deploy modern static websites with Netlify. Get CDN, Continuous deployment, 1-click HTTPS, and all the services you need.\r\n      </Typography>\r\n      <Typography variant=\"subtitle1\" gutterBottom my={4}>\r\n        To do a manual deploy to Netlify’s CDN:\r\n\r\n        <Code>{`npm install netlify-cli -g\r\nnetlify deploy`}</Code>\r\n\r\n        Choose <code>build</code> as the path to deploy.\r\n      </Typography>\r\n      <Typography variant=\"subtitle1\" gutterBottom my={4}>\r\n        To setup continuous delivery:<br />\r\n\r\n        With this setup Netlify will build and deploy when you push to git or open a pull request:\r\n        <ol>\r\n          <li><Link href=\"https://app.netlify.com/signup\" target=\"_blank\" rel=\"noreferrer noopener\">Start a new netlify project</Link></li>\r\n          <li>Pick your Git hosting service and select your repository</li>\r\n          <li>Click <code>Build your site</code></li>\r\n        </ol>\r\n      </Typography>\r\n    </Box>\r\n  );\r\n}\r\n\r\nfunction Deployment() {\r\n  return (\r\n    <React.Fragment>\r\n      <Helmet title=\"Deployment\" />\r\n\r\n      <Grid container spacing={6} justify=\"center\">\r\n        <Grid item xs={12} lg={9} xl={7}>\r\n          <Typography variant=\"h2\" gutterBottom display=\"inline\">\r\n            Deployment\r\n          </Typography>\r\n\r\n          <Breadcrumbs aria-label=\"Breadcrumb\" mt={2}>\r\n            <Link component={NavLink} exact to=\"/\">\r\n              Dashboard\r\n            </Link>\r\n            <Link component={NavLink} exact to=\"/documentation/welcome\">\r\n              Documentation\r\n            </Link>\r\n            <Typography>Deployment</Typography>\r\n          </Breadcrumbs>\r\n\r\n          <Divider my={6} />\r\n\r\n          <Introduction />\r\n          <StaticServer />\r\n          <OtherSolutions />\r\n          <Express />\r\n          <Netlify />\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Deployment;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport SyntaxHighlighter from 'react-syntax-highlighter';\r\nimport { vs2015 } from 'react-syntax-highlighter/dist/esm/styles/hljs';\r\n\r\nconst Base = styled(SyntaxHighlighter)`\r\n  border-radius: 3px;\r\n  padding: ${props => props.theme.spacing(3)}px !important;\r\n  background-color: #1B2430 !important;\r\n`;\r\n\r\nconst Code = ({children}) => {\r\n  return (\r\n    <Base language=\"javascript\" style={vs2015}>\r\n      {children}\r\n    </Base>\r\n  )\r\n}\r\n\r\nexport default Code;"],"sourceRoot":""}