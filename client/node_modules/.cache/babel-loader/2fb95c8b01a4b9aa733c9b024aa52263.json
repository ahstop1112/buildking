{"ast":null,"code":"import{Chart as ChartJS}from\"react-chartjs-2\";ChartJS.elements.Rectangle.prototype.draw=function(){var ctx=this._chart.ctx;var vm=this._view;var left,right,top,bottom,signX,signY,borderSkipped;var borderWidth=vm.borderWidth;// If radius is less than 0 or is large enough to cause drawing errors a max\n// radius is imposed. If cornerRadius is not defined set it to 0.\nvar cornerRadius=this._chart.config.options.cornerRadius;if(cornerRadius<0){cornerRadius=0;}if(typeof cornerRadius==\"undefined\"){cornerRadius=0;}if(!vm.horizontal){left=vm.x-vm.width/2;right=vm.x+vm.width/2;top=vm.y;bottom=vm.base;signX=1;signY=bottom>top?1:-1;borderSkipped=vm.borderSkipped||\"bottom\";}// Canvas doesn't allow us to stroke inside the width so we can\n// adjust the sizes to fit if we're setting a stroke on the line\nif(borderWidth){// borderWidth shold be less than bar width and bar height.\nvar barSize=Math.min(Math.abs(left-right),Math.abs(top-bottom));borderWidth=borderWidth>barSize?barSize:borderWidth;var halfStroke=borderWidth/2;// Adjust borderWidth when bar top position is near vm.base(zero).\nvar borderLeft=left+(borderSkipped!==\"left\"?halfStroke*signX:0);var borderRight=right+(borderSkipped!==\"right\"?-halfStroke*signX:0);var borderTop=top+(borderSkipped!==\"top\"?halfStroke*signY:0);var borderBottom=bottom+(borderSkipped!==\"bottom\"?-halfStroke*signY:0);// not become a vertical line?\nif(borderLeft!==borderRight){top=borderTop;bottom=borderBottom;}// not become a horizontal line?\nif(borderTop!==borderBottom){left=borderLeft;right=borderRight;}}ctx.beginPath();ctx.fillStyle=vm.backgroundColor;ctx.strokeStyle=vm.borderColor;ctx.lineWidth=borderWidth;// Corner points, from bottom-left to bottom-right clockwise\n// | 1 2 |\n// | 0 3 |\nvar corners=[[left,bottom],[left,top],[right,top],[right,bottom]];// Find first (starting) corner with fallback to 'bottom'\nvar borders=[\"bottom\",\"left\",\"top\",\"right\"];var startCorner=borders.indexOf(borderSkipped,0);if(startCorner===-1){startCorner=0;}function cornerAt(index){return corners[(startCorner+index)%4];}// Draw rectangle from 'startCorner'\nvar corner=cornerAt(0);ctx.moveTo(corner[0],corner[1]);for(var i=1;i<4;i++){corner=cornerAt(i);var nextCornerId=i+1;if(nextCornerId===4){nextCornerId=0;}var width=corners[2][0]-corners[1][0];var height=corners[0][1]-corners[1][1];var x=corners[1][0];var y=corners[1][1];var radius=cornerRadius;// Fix radius being too large\nif(radius>Math.abs(height)/1.5){radius=Math.floor(Math.abs(height)/1.5);}if(radius>Math.abs(width)/1.5){radius=Math.floor(Math.abs(width)/1.5);}if(height<0){// Negative values in a standard bar chart\nvar x_tl=x;var x_tr=x+width;var y_tl=y+height;var y_tr=y+height;var x_bl=x;var x_br=x+width;var y_bl=y;var y_br=y;// Draw\nctx.moveTo(x_bl+radius,y_bl);ctx.lineTo(x_br-radius,y_br);ctx.quadraticCurveTo(x_br,y_br,x_br,y_br-radius);ctx.lineTo(x_tr,y_tr+radius);ctx.quadraticCurveTo(x_tr,y_tr,x_tr-radius,y_tr);ctx.lineTo(x_tl+radius,y_tl);ctx.quadraticCurveTo(x_tl,y_tl,x_tl,y_tl+radius);ctx.lineTo(x_bl,y_bl-radius);ctx.quadraticCurveTo(x_bl,y_bl,x_bl+radius,y_bl);}else{ctx.moveTo(x+radius,y);ctx.lineTo(x+width-radius,y);ctx.quadraticCurveTo(x+width,y,x+width,y+radius);ctx.lineTo(x+width,y+height-radius);ctx.quadraticCurveTo(x+width,y+height,x+width,y+height);ctx.lineTo(x+radius,y+height);ctx.quadraticCurveTo(x,y+height,x,y+height);ctx.lineTo(x,y+radius);ctx.quadraticCurveTo(x,y,x+radius,y);}}ctx.fill();if(borderWidth){ctx.stroke();}};","map":{"version":3,"sources":["/Users/perrycheung/Documents/PROJECT/HKLTTI/buildking/client/src/vendor/roundedBarCharts.js"],"names":["Chart","ChartJS","elements","Rectangle","prototype","draw","ctx","_chart","vm","_view","left","right","top","bottom","signX","signY","borderSkipped","borderWidth","cornerRadius","config","options","horizontal","x","width","y","base","barSize","Math","min","abs","halfStroke","borderLeft","borderRight","borderTop","borderBottom","beginPath","fillStyle","backgroundColor","strokeStyle","borderColor","lineWidth","corners","borders","startCorner","indexOf","cornerAt","index","corner","moveTo","i","nextCornerId","height","radius","floor","x_tl","x_tr","y_tl","y_tr","x_bl","x_br","y_bl","y_br","lineTo","quadraticCurveTo","fill","stroke"],"mappings":"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","sourcesContent":["import { Chart as ChartJS } from \"react-chartjs-2\";\r\n\r\nChartJS.elements.Rectangle.prototype.draw = function() {\r\n  const ctx = this._chart.ctx;\r\n  const vm = this._view;\r\n  let left, right, top, bottom, signX, signY, borderSkipped;\r\n  let borderWidth = vm.borderWidth;\r\n\r\n  // If radius is less than 0 or is large enough to cause drawing errors a max\r\n  // radius is imposed. If cornerRadius is not defined set it to 0.\r\n  let cornerRadius = this._chart.config.options.cornerRadius;\r\n  if (cornerRadius < 0) {\r\n    cornerRadius = 0;\r\n  }\r\n  if (typeof cornerRadius == \"undefined\") {\r\n    cornerRadius = 0;\r\n  }\r\n\r\n  if (!vm.horizontal) {\r\n    left = vm.x - vm.width / 2;\r\n    right = vm.x + vm.width / 2;\r\n    top = vm.y;\r\n    bottom = vm.base;\r\n    signX = 1;\r\n    signY = bottom > top ? 1 : -1;\r\n    borderSkipped = vm.borderSkipped || \"bottom\";\r\n  }\r\n\r\n  // Canvas doesn't allow us to stroke inside the width so we can\r\n  // adjust the sizes to fit if we're setting a stroke on the line\r\n  if (borderWidth) {\r\n    // borderWidth shold be less than bar width and bar height.\r\n    const barSize = Math.min(Math.abs(left - right), Math.abs(top - bottom));\r\n    borderWidth = borderWidth > barSize ? barSize : borderWidth;\r\n    const halfStroke = borderWidth / 2;\r\n    // Adjust borderWidth when bar top position is near vm.base(zero).\r\n    const borderLeft =\r\n      left + (borderSkipped !== \"left\" ? halfStroke * signX : 0);\r\n    const borderRight =\r\n      right + (borderSkipped !== \"right\" ? -halfStroke * signX : 0);\r\n    const borderTop = top + (borderSkipped !== \"top\" ? halfStroke * signY : 0);\r\n    const borderBottom =\r\n      bottom + (borderSkipped !== \"bottom\" ? -halfStroke * signY : 0);\r\n    // not become a vertical line?\r\n    if (borderLeft !== borderRight) {\r\n      top = borderTop;\r\n      bottom = borderBottom;\r\n    }\r\n    // not become a horizontal line?\r\n    if (borderTop !== borderBottom) {\r\n      left = borderLeft;\r\n      right = borderRight;\r\n    }\r\n  }\r\n\r\n  ctx.beginPath();\r\n  ctx.fillStyle = vm.backgroundColor;\r\n  ctx.strokeStyle = vm.borderColor;\r\n  ctx.lineWidth = borderWidth;\r\n\r\n  // Corner points, from bottom-left to bottom-right clockwise\r\n  // | 1 2 |\r\n  // | 0 3 |\r\n  const corners = [\r\n    [left, bottom],\r\n    [left, top],\r\n    [right, top],\r\n    [right, bottom]\r\n  ];\r\n\r\n  // Find first (starting) corner with fallback to 'bottom'\r\n  const borders = [\"bottom\", \"left\", \"top\", \"right\"];\r\n  let startCorner = borders.indexOf(borderSkipped, 0);\r\n  if (startCorner === -1) {\r\n    startCorner = 0;\r\n  }\r\n\r\n  function cornerAt(index) {\r\n    return corners[(startCorner + index) % 4];\r\n  }\r\n\r\n  // Draw rectangle from 'startCorner'\r\n  let corner = cornerAt(0);\r\n  ctx.moveTo(corner[0], corner[1]);\r\n\r\n  for (let i = 1; i < 4; i++) {\r\n    corner = cornerAt(i);\r\n    let nextCornerId = i + 1;\r\n    if (nextCornerId === 4) {\r\n      nextCornerId = 0;\r\n    }\r\n\r\n    const width = corners[2][0] - corners[1][0];\r\n    const height = corners[0][1] - corners[1][1];\r\n    const x = corners[1][0];\r\n    const y = corners[1][1];\r\n\r\n    let radius = cornerRadius;\r\n\r\n    // Fix radius being too large\r\n    if (radius > Math.abs(height) / 1.5) {\r\n      radius = Math.floor(Math.abs(height) / 1.5);\r\n    }\r\n    if (radius > Math.abs(width) / 1.5) {\r\n      radius = Math.floor(Math.abs(width) / 1.5);\r\n    }\r\n\r\n    if (height < 0) {\r\n      // Negative values in a standard bar chart\r\n      const x_tl = x;\r\n      const x_tr = x + width;\r\n      const y_tl = y + height;\r\n      const y_tr = y + height;\r\n\r\n      const x_bl = x;\r\n      const x_br = x + width;\r\n      const y_bl = y;\r\n      const y_br = y;\r\n\r\n      // Draw\r\n      ctx.moveTo(x_bl + radius, y_bl);\r\n      ctx.lineTo(x_br - radius, y_br);\r\n      ctx.quadraticCurveTo(x_br, y_br, x_br, y_br - radius);\r\n      ctx.lineTo(x_tr, y_tr + radius);\r\n      ctx.quadraticCurveTo(x_tr, y_tr, x_tr - radius, y_tr);\r\n      ctx.lineTo(x_tl + radius, y_tl);\r\n      ctx.quadraticCurveTo(x_tl, y_tl, x_tl, y_tl + radius);\r\n      ctx.lineTo(x_bl, y_bl - radius);\r\n      ctx.quadraticCurveTo(x_bl, y_bl, x_bl + radius, y_bl);\r\n    } else {\r\n      ctx.moveTo(x + radius, y);\r\n      ctx.lineTo(x + width - radius, y);\r\n      ctx.quadraticCurveTo(x + width, y, x + width, y + radius);\r\n      ctx.lineTo(x + width, y + height - radius);\r\n      ctx.quadraticCurveTo(x + width, y + height, x + width, y + height);\r\n      ctx.lineTo(x + radius, y + height);\r\n      ctx.quadraticCurveTo(x, y + height, x, y + height);\r\n      ctx.lineTo(x, y + radius);\r\n      ctx.quadraticCurveTo(x, y, x + radius, y);\r\n    }\r\n  }\r\n\r\n  ctx.fill();\r\n  if (borderWidth) {\r\n    ctx.stroke();\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}