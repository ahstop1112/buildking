{"ast":null,"code":"import React from\"react\";import styled from\"styled-components\";import{NavLink as RouterNavLink}from\"react-router-dom\";import{Helmet}from'react-helmet';import{Box,Breadcrumbs as MuiBreadcrumbs,Divider as MuiDivider,Grid,Link,Typography as MuiTypography}from\"@material-ui/core\";import{spacing}from\"@material-ui/system\";import Code from\"../../components/Code\";var NavLink=React.forwardRef(function(props,ref){return/*#__PURE__*/React.createElement(RouterNavLink,Object.assign({innerRef:ref},props));});var Divider=styled(MuiDivider)(spacing);var Breadcrumbs=styled(MuiBreadcrumbs)(spacing);var Typography=styled(MuiTypography)(spacing);function Introduction(){return/*#__PURE__*/React.createElement(Box,{mb:10},/*#__PURE__*/React.createElement(Typography,{variant:\"h3\",gutterBottom:true},\"Introduction\"),/*#__PURE__*/React.createElement(Typography,{variant:\"subtitle1\",gutterBottom:true,my:4},\"This theme uses Material-UI in combination with Styled-Components. On this page we try to cover the basics on how to adjust the color palette and other styles.\"));}function HowItWorks(){return/*#__PURE__*/React.createElement(Box,{mb:10},/*#__PURE__*/React.createElement(Typography,{variant:\"h3\",gutterBottom:true},\"How it works\"),/*#__PURE__*/React.createElement(Typography,{variant:\"subtitle1\",gutterBottom:true,my:4},\"Material-UI's \",/*#__PURE__*/React.createElement(Link,{href:\"https://material-ui.com/customization/theming/#createmuitheme-options-args-theme\",target:\"_blank\",rel:\"noreferrer noopener\"},\"createMuiTheme\"),\" is used to extend Material-UI's default styling. Material App is using both the Material-UI ThemeProvider as Styled-Components ThemeProvider. This way, global theme variables will be applied to both Material-UI's components as custom Styled-Components.\"),/*#__PURE__*/React.createElement(Typography,{variant:\"subtitle1\",gutterBottom:true,my:4},\"How to access theme variables from a component:\",/*#__PURE__*/React.createElement(Code,null,\"const CustomComponent = styled.div`\\n  background: ${props => props.theme.palette.primary.main};\\n  color: ${props => props.theme.palette.common.white};\\n  padding: ${props => props.theme.spacing(2)}px;\\n`;\\n\\nconst Custom = ({children}) => (\\n  <CustomComponent>\\n    {children}\\n  </CustomComponent>\\n);\")));}function AdjustingTheme(){return/*#__PURE__*/React.createElement(Box,{mb:10},/*#__PURE__*/React.createElement(Typography,{variant:\"h3\",gutterBottom:true},\"Adjusting theme variables\"),/*#__PURE__*/React.createElement(Typography,{variant:\"subtitle1\",gutterBottom:true,my:4},\"In the \",/*#__PURE__*/React.createElement(\"code\",null,\"/theme\"),\" folder you can find all the theme variables. They are categorized by palettes, shadows, typography, overrides and theme variants. You are able to control each on them inndividually. Typography example:\",/*#__PURE__*/React.createElement(Code,null,\"const typography = {\\n  h1: {\\n    fontSize: \\\"2rem\\\",\\n    fontWeight: 600,\\n    lineHeight: 1.2\\n  },\\n  h2: {\\n    fontSize: \\\"1.75rem\\\",\\n    fontWeight: 600,\\n    lineHeight: 1.2\\n  },\\n  h3: {\\n    fontSize: \\\"1.5rem\\\",\\n    fontWeight: 600,\\n    lineHeight: 1.2\\n  },\\n  //etc\\n};\")));}function Theming(){return/*#__PURE__*/React.createElement(React.Fragment,null,/*#__PURE__*/React.createElement(Helmet,{title:\"Theming\"}),/*#__PURE__*/React.createElement(Grid,{container:true,spacing:6,justify:\"center\"},/*#__PURE__*/React.createElement(Grid,{item:true,xs:12,lg:9,xl:7},/*#__PURE__*/React.createElement(Typography,{variant:\"h2\",gutterBottom:true,display:\"inline\"},\"Theming\"),/*#__PURE__*/React.createElement(Breadcrumbs,{\"aria-label\":\"Breadcrumb\",mt:2},/*#__PURE__*/React.createElement(Link,{component:NavLink,exact:true,to:\"/\"},\"Dashboard\"),/*#__PURE__*/React.createElement(Link,{component:NavLink,exact:true,to:\"/documentation/welcome\"},\"Documentation\"),/*#__PURE__*/React.createElement(Typography,null,\"Theming\")),/*#__PURE__*/React.createElement(Divider,{my:6}),/*#__PURE__*/React.createElement(Introduction,null),/*#__PURE__*/React.createElement(HowItWorks,null),/*#__PURE__*/React.createElement(AdjustingTheme,null))));}export default Theming;","map":{"version":3,"sources":["/Users/perrycheung/Documents/PROJECT/HKLTTI/buildking/client/src/pages/docs/Theming.js"],"names":["React","styled","NavLink","RouterNavLink","Helmet","Box","Breadcrumbs","MuiBreadcrumbs","Divider","MuiDivider","Grid","Link","Typography","MuiTypography","spacing","Code","forwardRef","props","ref","Introduction","HowItWorks","AdjustingTheme","Theming"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { NavLink as RouterNavLink } from \"react-router-dom\";\r\n\r\nimport { Helmet } from 'react-helmet';\r\n\r\nimport {\r\n  Box,\r\n  Breadcrumbs as MuiBreadcrumbs,\r\n  Divider as MuiDivider,\r\n  Grid,\r\n  Link,\r\n  Typography as MuiTypography\r\n} from \"@material-ui/core\";\r\n\r\nimport { spacing } from \"@material-ui/system\";\r\n\r\nimport Code from \"../../components/Code\";\r\n\r\nconst NavLink = React.forwardRef((props, ref) => (\r\n  <RouterNavLink innerRef={ref} {...props} />\r\n));\r\n\r\nconst Divider = styled(MuiDivider)(spacing);\r\n\r\nconst Breadcrumbs = styled(MuiBreadcrumbs)(spacing);\r\n\r\nconst Typography = styled(MuiTypography)(spacing);\r\n\r\nfunction Introduction() {\r\n  return (\r\n    <Box mb={10}>\r\n      <Typography variant=\"h3\" gutterBottom>\r\n        Introduction\r\n      </Typography>\r\n      <Typography variant=\"subtitle1\" gutterBottom my={4}>\r\n        This theme uses Material-UI in combination with Styled-Components. On this page we try to cover the basics on how to adjust the color palette and other styles.\r\n      </Typography>\r\n    </Box>\r\n  );\r\n}\r\n\r\nfunction HowItWorks() {\r\n  return (\r\n    <Box mb={10}>\r\n      <Typography variant=\"h3\" gutterBottom>\r\n        How it works\r\n      </Typography>\r\n      <Typography variant=\"subtitle1\" gutterBottom my={4}>\r\n        Material-UI's <Link href=\"https://material-ui.com/customization/theming/#createmuitheme-options-args-theme\" target=\"_blank\" rel=\"noreferrer noopener\">createMuiTheme</Link> is used to extend Material-UI's default styling. Material App is using both the Material-UI ThemeProvider as Styled-Components ThemeProvider. This way, global theme variables will be applied to both Material-UI's components as custom Styled-Components.</Typography>\r\n      <Typography variant=\"subtitle1\" gutterBottom my={4}>\r\n        How to access theme variables from a component:\r\n\r\n        <Code>{`const CustomComponent = styled.div\\`\r\n  background: \\${props => props.theme.palette.primary.main};\r\n  color: \\${props => props.theme.palette.common.white};\r\n  padding: \\${props => props.theme.spacing(2)}px;\r\n\\`;\r\n\r\nconst Custom = ({children}) => (\r\n  <CustomComponent>\r\n    {children}\r\n  </CustomComponent>\r\n);`}</Code>\r\n      </Typography>\r\n    </Box>\r\n  );\r\n}\r\n\r\nfunction AdjustingTheme() {\r\n  return (\r\n    <Box mb={10}>\r\n      <Typography variant=\"h3\" gutterBottom>\r\n        Adjusting theme variables\r\n      </Typography>\r\n      <Typography variant=\"subtitle1\" gutterBottom my={4}>\r\n        In the <code>/theme</code> folder you can find all the theme variables. They are categorized by palettes, shadows, typography, overrides and theme variants. You are able to control each on them inndividually. Typography example:\r\n\r\n        <Code>{`const typography = {\r\n  h1: {\r\n    fontSize: \"2rem\",\r\n    fontWeight: 600,\r\n    lineHeight: 1.2\r\n  },\r\n  h2: {\r\n    fontSize: \"1.75rem\",\r\n    fontWeight: 600,\r\n    lineHeight: 1.2\r\n  },\r\n  h3: {\r\n    fontSize: \"1.5rem\",\r\n    fontWeight: 600,\r\n    lineHeight: 1.2\r\n  },\r\n  //etc\r\n};`}</Code>\r\n      </Typography>\r\n    </Box>\r\n  );\r\n}\r\n\r\nfunction Theming() {\r\n  return (\r\n    <React.Fragment>\r\n      <Helmet title=\"Theming\" />\r\n\r\n      <Grid container spacing={6} justify=\"center\">\r\n        <Grid item xs={12} lg={9} xl={7}>\r\n          <Typography variant=\"h2\" gutterBottom display=\"inline\">\r\n            Theming\r\n          </Typography>\r\n\r\n          <Breadcrumbs aria-label=\"Breadcrumb\" mt={2}>\r\n            <Link component={NavLink} exact to=\"/\">\r\n              Dashboard\r\n            </Link>\r\n            <Link component={NavLink} exact to=\"/documentation/welcome\">\r\n              Documentation\r\n            </Link>\r\n            <Typography>Theming</Typography>\r\n          </Breadcrumbs>\r\n\r\n          <Divider my={6} />\r\n\r\n          <Introduction />\r\n          <HowItWorks />\r\n          <AdjustingTheme />\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Theming;\r\n"]},"metadata":{},"sourceType":"module"}