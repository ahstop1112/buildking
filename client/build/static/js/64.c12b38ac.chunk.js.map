{"version":3,"sources":["pages/docs/Theming.js","components/Code.js"],"names":["NavLink","React","forwardRef","props","ref","innerRef","Divider","styled","MuiDivider","spacing","Breadcrumbs","MuiBreadcrumbs","Typography","MuiTypography","Introduction","mb","variant","gutterBottom","my","HowItWorks","href","target","rel","AdjustingTheme","Theming","Fragment","title","container","justify","item","xs","lg","xl","display","aria-label","mt","component","exact","to","Base","SyntaxHighlighter","theme","Code","children","language","style","vs2015"],"mappings":"sHAAA,0HAmBMA,EAAUC,IAAMC,YAAW,SAACC,EAAOC,GAAR,OAC/B,kBAAC,IAAD,eAAeC,SAAUD,GAASD,OAG9BG,EAAUC,YAAOC,IAAPD,CAAmBE,KAE7BC,EAAcH,YAAOI,IAAPJ,CAAuBE,KAErCG,EAAaL,YAAOM,IAAPN,CAAsBE,KAEzC,SAASK,IACP,OACE,kBAAC,IAAD,CAAKC,GAAI,IACP,kBAACH,EAAD,CAAYI,QAAQ,KAAKC,cAAY,GAArC,gBAGA,kBAACL,EAAD,CAAYI,QAAQ,YAAYC,cAAY,EAACC,GAAI,GAAjD,oKAON,SAASC,IACP,OACE,kBAAC,IAAD,CAAKJ,GAAI,IACP,kBAACH,EAAD,CAAYI,QAAQ,KAAKC,cAAY,GAArC,gBAGA,kBAACL,EAAD,CAAYI,QAAQ,YAAYC,cAAY,EAACC,GAAI,GAAjD,iBACgB,kBAAC,IAAD,CAAME,KAAK,mFAAmFC,OAAO,SAASC,IAAI,uBAAlH,kBADhB,iQAEA,kBAACV,EAAD,CAAYI,QAAQ,YAAYC,cAAY,EAACC,GAAI,GAAjD,kDAGE,kBAAC,IAAD,4TAgBR,SAASK,IACP,OACE,kBAAC,IAAD,CAAKR,GAAI,IACP,kBAACH,EAAD,CAAYI,QAAQ,KAAKC,cAAY,GAArC,6BAGA,kBAACL,EAAD,CAAYI,QAAQ,YAAYC,cAAY,EAACC,GAAI,GAAjD,UACS,wCADT,6MAGE,kBAAC,IAAD,oSAuDOM,UAhCf,WACE,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,SAAD,CAAQC,MAAM,YAEd,kBAAC,IAAD,CAAMC,WAAS,EAAClB,QAAS,EAAGmB,QAAQ,UAClC,kBAAC,IAAD,CAAMC,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,GAC5B,kBAACpB,EAAD,CAAYI,QAAQ,KAAKC,cAAY,EAACgB,QAAQ,UAA9C,WAIA,kBAACvB,EAAD,CAAawB,aAAW,aAAaC,GAAI,GACvC,kBAAC,IAAD,CAAMC,UAAWpC,EAASqC,OAAK,EAACC,GAAG,KAAnC,aAGA,kBAAC,IAAD,CAAMF,UAAWpC,EAASqC,OAAK,EAACC,GAAG,0BAAnC,iBAGA,kBAAC1B,EAAD,iBAGF,kBAACN,EAAD,CAASY,GAAI,IAEb,kBAACJ,EAAD,MACA,kBAACK,EAAD,MACA,kBAACI,EAAD,W,6PCxHV,IAAMgB,EAAOhC,YAAOiC,IAAPjC,CAAH,KAEG,SAAAJ,GAAK,OAAIA,EAAMsC,MAAMhC,QAAQ,MAY3BiC,IARF,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SACb,OACE,kBAACJ,EAAD,CAAMK,SAAS,aAAaC,MAAOC,KAChCH","file":"static/js/64.c12b38ac.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { NavLink as RouterNavLink } from \"react-router-dom\";\r\n\r\nimport { Helmet } from 'react-helmet';\r\n\r\nimport {\r\n  Box,\r\n  Breadcrumbs as MuiBreadcrumbs,\r\n  Divider as MuiDivider,\r\n  Grid,\r\n  Link,\r\n  Typography as MuiTypography\r\n} from \"@material-ui/core\";\r\n\r\nimport { spacing } from \"@material-ui/system\";\r\n\r\nimport Code from \"../../components/Code\";\r\n\r\nconst NavLink = React.forwardRef((props, ref) => (\r\n  <RouterNavLink innerRef={ref} {...props} />\r\n));\r\n\r\nconst Divider = styled(MuiDivider)(spacing);\r\n\r\nconst Breadcrumbs = styled(MuiBreadcrumbs)(spacing);\r\n\r\nconst Typography = styled(MuiTypography)(spacing);\r\n\r\nfunction Introduction() {\r\n  return (\r\n    <Box mb={10}>\r\n      <Typography variant=\"h3\" gutterBottom>\r\n        Introduction\r\n      </Typography>\r\n      <Typography variant=\"subtitle1\" gutterBottom my={4}>\r\n        This theme uses Material-UI in combination with Styled-Components. On this page we try to cover the basics on how to adjust the color palette and other styles.\r\n      </Typography>\r\n    </Box>\r\n  );\r\n}\r\n\r\nfunction HowItWorks() {\r\n  return (\r\n    <Box mb={10}>\r\n      <Typography variant=\"h3\" gutterBottom>\r\n        How it works\r\n      </Typography>\r\n      <Typography variant=\"subtitle1\" gutterBottom my={4}>\r\n        Material-UI's <Link href=\"https://material-ui.com/customization/theming/#createmuitheme-options-args-theme\" target=\"_blank\" rel=\"noreferrer noopener\">createMuiTheme</Link> is used to extend Material-UI's default styling. Material App is using both the Material-UI ThemeProvider as Styled-Components ThemeProvider. This way, global theme variables will be applied to both Material-UI's components as custom Styled-Components.</Typography>\r\n      <Typography variant=\"subtitle1\" gutterBottom my={4}>\r\n        How to access theme variables from a component:\r\n\r\n        <Code>{`const CustomComponent = styled.div\\`\r\n  background: \\${props => props.theme.palette.primary.main};\r\n  color: \\${props => props.theme.palette.common.white};\r\n  padding: \\${props => props.theme.spacing(2)}px;\r\n\\`;\r\n\r\nconst Custom = ({children}) => (\r\n  <CustomComponent>\r\n    {children}\r\n  </CustomComponent>\r\n);`}</Code>\r\n      </Typography>\r\n    </Box>\r\n  );\r\n}\r\n\r\nfunction AdjustingTheme() {\r\n  return (\r\n    <Box mb={10}>\r\n      <Typography variant=\"h3\" gutterBottom>\r\n        Adjusting theme variables\r\n      </Typography>\r\n      <Typography variant=\"subtitle1\" gutterBottom my={4}>\r\n        In the <code>/theme</code> folder you can find all the theme variables. They are categorized by palettes, shadows, typography, overrides and theme variants. You are able to control each on them inndividually. Typography example:\r\n\r\n        <Code>{`const typography = {\r\n  h1: {\r\n    fontSize: \"2rem\",\r\n    fontWeight: 600,\r\n    lineHeight: 1.2\r\n  },\r\n  h2: {\r\n    fontSize: \"1.75rem\",\r\n    fontWeight: 600,\r\n    lineHeight: 1.2\r\n  },\r\n  h3: {\r\n    fontSize: \"1.5rem\",\r\n    fontWeight: 600,\r\n    lineHeight: 1.2\r\n  },\r\n  //etc\r\n};`}</Code>\r\n      </Typography>\r\n    </Box>\r\n  );\r\n}\r\n\r\nfunction Theming() {\r\n  return (\r\n    <React.Fragment>\r\n      <Helmet title=\"Theming\" />\r\n\r\n      <Grid container spacing={6} justify=\"center\">\r\n        <Grid item xs={12} lg={9} xl={7}>\r\n          <Typography variant=\"h2\" gutterBottom display=\"inline\">\r\n            Theming\r\n          </Typography>\r\n\r\n          <Breadcrumbs aria-label=\"Breadcrumb\" mt={2}>\r\n            <Link component={NavLink} exact to=\"/\">\r\n              Dashboard\r\n            </Link>\r\n            <Link component={NavLink} exact to=\"/documentation/welcome\">\r\n              Documentation\r\n            </Link>\r\n            <Typography>Theming</Typography>\r\n          </Breadcrumbs>\r\n\r\n          <Divider my={6} />\r\n\r\n          <Introduction />\r\n          <HowItWorks />\r\n          <AdjustingTheme />\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Theming;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport SyntaxHighlighter from 'react-syntax-highlighter';\r\nimport { vs2015 } from 'react-syntax-highlighter/dist/esm/styles/hljs';\r\n\r\nconst Base = styled(SyntaxHighlighter)`\r\n  border-radius: 3px;\r\n  padding: ${props => props.theme.spacing(3)}px !important;\r\n  background-color: #1B2430 !important;\r\n`;\r\n\r\nconst Code = ({children}) => {\r\n  return (\r\n    <Base language=\"javascript\" style={vs2015}>\r\n      {children}\r\n    </Base>\r\n  )\r\n}\r\n\r\nexport default Code;"],"sourceRoot":""}